// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Support_Ticket_System.DataContext;

#nullable disable

namespace Support_Ticket_System.Migrations
{
    [DbContext(typeof(Datacontext))]
    [Migration("20240416151509_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Support_Ticket_System.Entites.Priority", b =>
                {
                    b.Property<Guid>("PriorityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PriorityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TicketID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PriorityID");

                    b.HasIndex("TicketID");

                    b.ToTable("priorities");
                });

            modelBuilder.Entity("Support_Ticket_System.Entites.ProcessFlow", b =>
                {
                    b.Property<Guid>("ProcessFlowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentProcessFlowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProcessFlowName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProcessFlowId");

                    b.HasIndex("ParentProcessFlowId");

                    b.HasIndex("TenantID");

                    b.ToTable("processFlows");
                });

            modelBuilder.Entity("Support_Ticket_System.Entites.Severity", b =>
                {
                    b.Property<Guid>("SeverityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SeverityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TicketID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SeverityID");

                    b.HasIndex("TicketID");

                    b.ToTable("severities");
                });

            modelBuilder.Entity("Support_Ticket_System.Entites.Status", b =>
                {
                    b.Property<Guid>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TicketID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StatusID");

                    b.HasIndex("TicketID");

                    b.ToTable("statuses");
                });

            modelBuilder.Entity("Support_Ticket_System.Entites.Tag", b =>
                {
                    b.Property<Guid>("TagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagID");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("Support_Ticket_System.Entites.taggableitem", b =>
                {
                    b.Property<Guid>("TicketID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TicketID", "TagID");

                    b.HasIndex("TagID");

                    b.ToTable("taggableitems");
                });

            modelBuilder.Entity("Support_Ticket_System.Entites.Tenant", b =>
                {
                    b.Property<Guid>("TenantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TenantID");

                    b.ToTable("tenants");
                });

            modelBuilder.Entity("Support_Ticket_System.Entites.Ticket", b =>
                {
                    b.Property<Guid>("TicketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssignTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProcessFlowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TicketID");

                    b.HasIndex("ProcessFlowId");

                    b.HasIndex("TenantID");

                    b.HasIndex("UserID");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("Support_Ticket_System.Entites.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("TenantID");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Support_Ticket_System.Entites.Priority", b =>
                {
                    b.HasOne("Support_Ticket_System.Entites.Ticket", "ticket")
                        .WithMany("priorities")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ticket");
                });

            modelBuilder.Entity("Support_Ticket_System.Entites.ProcessFlow", b =>
                {
                    b.HasOne("Support_Ticket_System.Entites.ProcessFlow", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentProcessFlowId");

                    b.HasOne("Support_Ticket_System.Entites.Tenant", "tenant")
                        .WithMany("processflows")
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("tenant");
                });

            modelBuilder.Entity("Support_Ticket_System.Entites.Severity", b =>
                {
                    b.HasOne("Support_Ticket_System.Entites.Ticket", "ticket")
                        .WithMany("severities")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ticket");
                });

            modelBuilder.Entity("Support_Ticket_System.Entites.Status", b =>
                {
                    b.HasOne("Support_Ticket_System.Entites.Ticket", "ticket")
                        .WithMany("status")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ticket");
                });

            modelBuilder.Entity("Support_Ticket_System.Entites.taggableitem", b =>
                {
                    b.HasOne("Support_Ticket_System.Entites.Tag", "tag")
                        .WithMany("taggableitems")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Support_Ticket_System.Entites.Ticket", "ticket")
                        .WithMany("tags")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tag");

                    b.Navigation("ticket");
                });

            modelBuilder.Entity("Support_Ticket_System.Entites.Ticket", b =>
                {
                    b.HasOne("Support_Ticket_System.Entites.ProcessFlow", "processFlow")
                        .WithMany("tickets")
                        .HasForeignKey("ProcessFlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Support_Ticket_System.Entites.Tenant", "tenant")
                        .WithMany("tickets")
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Support_Ticket_System.Entites.User", "user")
                        .WithMany("Tickets")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("processFlow");

                    b.Navigation("tenant");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Support_Ticket_System.Entites.User", b =>
                {
                    b.HasOne("Support_Ticket_System.Entites.Tenant", "tenant")
                        .WithMany("users")
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tenant");
                });

            modelBuilder.Entity("Support_Ticket_System.Entites.ProcessFlow", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("tickets");
                });

            modelBuilder.Entity("Support_Ticket_System.Entites.Tag", b =>
                {
                    b.Navigation("taggableitems");
                });

            modelBuilder.Entity("Support_Ticket_System.Entites.Tenant", b =>
                {
                    b.Navigation("processflows");

                    b.Navigation("tickets");

                    b.Navigation("users");
                });

            modelBuilder.Entity("Support_Ticket_System.Entites.Ticket", b =>
                {
                    b.Navigation("priorities");

                    b.Navigation("severities");

                    b.Navigation("status");

                    b.Navigation("tags");
                });

            modelBuilder.Entity("Support_Ticket_System.Entites.User", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
